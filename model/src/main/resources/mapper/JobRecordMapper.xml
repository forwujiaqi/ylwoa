<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ylwoa.dao.JobRecordMapper">
  <resultMap id="BaseResultMap" type="com.ylwoa.model.JobRecord">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="record_name" jdbcType="VARCHAR" property="recordName" />
    <result column="record_type" jdbcType="INTEGER" property="recordType" />
    <result column="delete_flg" jdbcType="INTEGER" property="deleteFlg" />
    <result column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="project_name" jdbcType="VARCHAR" property="projectName" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user_id" jdbcType="INTEGER" property="createUserId" />
    <result column="create_user_name" jdbcType="VARCHAR" property="createUserName" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user_id" jdbcType="INTEGER" property="updateUserId" />
    <result column="update_user_name" jdbcType="VARCHAR" property="updateUserName" />
    <result column="owner_id" jdbcType="INTEGER" property="ownerId" />
    <result column="owner_name" jdbcType="VARCHAR" property="ownerName" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ylwoa.model.JobRecord">
    <result column="record_content" jdbcType="LONGVARCHAR" property="recordContent" />
  </resultMap>
  <sql id="Base_Column_List">
    id, record_name, record_type, delete_flg, create_time, create_user_id, update_time, owner_id,owner_name,
    update_user_id,create_user_name,update_user_name,project_id
  </sql>
  <sql id="Blob_Column_List">
    record_content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from job_record
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from job_record
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.ylwoa.model.JobRecord">
    insert into job_record (id, record_name, record_type, project_id,
      delete_flg, create_time, create_user_id, 
      update_time, update_user_id, record_content,owner_id,owner_name,create_user_name,update_user_name
      )
    values (#{id,jdbcType=BIGINT}, #{recordName,jdbcType=VARCHAR}, #{recordType,jdbcType=INTEGER}, #{projectId,jdbcType=BIGINT},
      #{deleteFlg,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{createUserId,jdbcType=INTEGER}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateUserId,jdbcType=INTEGER}, #{recordContent,jdbcType=LONGVARCHAR},
      #{ownerId,jdbcType=INTEGER},#{ownerName,jdbcType=VARCHAR},#{createUserName,jdbcType=VARCHAR},#{updateUserName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ylwoa.model.JobRecord">
    insert into job_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="recordName != null">
        record_name,
      </if>
      <if test="recordType != null">
        record_type,
      </if>
      <if test="projectId != null">
        project_id,
      </if>
      <if test="deleteFlg != null">
        delete_flg,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUserId != null">
        create_user_id,
      </if>
      <if test="createUserName != null">
        create_user_name,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUserId != null">
        update_user_id,
      </if>
      <if test="updateUserName != null">
        update_user_name,
      </if>
      <if test="recordContent != null">
        record_content,
      </if>
      <if test="ownerId != null">
        owner_id,
      </if>
      <if test="ownerName != null">
        owner_name,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="recordName != null">
        #{recordName,jdbcType=VARCHAR},
      </if>
      <if test="recordType != null">
        #{recordType,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        #{projectId,jdbcType=BIGINT},
      </if>
      <if test="deleteFlg != null">
        #{deleteFlg,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createUserName != null">
        #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        #{updateUserId,jdbcType=INTEGER},
      </if>
      <if test="updateUserName != null">
        #{updateUserName,jdbcType=VARCHAR},
      </if>
      <if test="recordContent != null">
        #{recordContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="ownerId != null">
        #{ownerId,jdbcType=INTEGER},
      </if>
      <if test="ownerName != null">
        #{ownerName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ylwoa.model.JobRecord">
    update job_record
    <set>
      <if test="recordName != null">
        record_name = #{recordName,jdbcType=VARCHAR},
      </if>
      <if test="recordType != null">
        record_type = #{recordType,jdbcType=INTEGER},
      </if>
      <if test="projectId != null">
        project_id = #{projectId,jdbcType=BIGINT},
      </if>
      <if test="deleteFlg != null">
        delete_flg = #{deleteFlg,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUserId != null">
        create_user_id = #{createUserId,jdbcType=INTEGER},
      </if>
      <if test="createUserName != null">
        create_user_name = #{createUserName,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUserId != null">
        update_user_id = #{updateUserId,jdbcType=INTEGER},
      </if>
      <if test="updateUserName != null">
        update_user_name = #{updateUserName,jdbcType=VARCHAR},
      </if>
      <if test="recordContent != null">
        record_content = #{recordContent,jdbcType=LONGVARCHAR},
      </if>
      <if test="ownerId != null">
        owner_id = #{ownerId,jdbcType=INTEGER},
      </if>
      <if test="ownerName != null">
        owner_name = #{ownerName,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ylwoa.model.JobRecord">
    update job_record
    set record_name = #{recordName,jdbcType=VARCHAR},
      record_type = #{recordType,jdbcType=INTEGER},
      project_id =  #{projectId,jdbcType=BIGINT},
      delete_flg = #{deleteFlg,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=INTEGER},
      record_content = #{recordContent,jdbcType=LONGVARCHAR},
      owner_id = #{ownerId,jdbcType=INTEGER},
      owner_name = #{ownerName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ylwoa.model.JobRecord">
    update job_record
    set record_name = #{recordName,jdbcType=VARCHAR},
      record_type = #{recordType,jdbcType=INTEGER},
      project_id =  #{projectId,jdbcType=BIGINT},
      delete_flg = #{deleteFlg,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user_id = #{createUserId,jdbcType=INTEGER},
      create_user_name = #{createUserName,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user_id = #{updateUserId,jdbcType=INTEGER},
      update_user_name = #{updateUserName,jdbcType=VARCHAR},
      owner_id = #{ownerId,jdbcType=INTEGER},
      owner_name = #{ownerName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="select"
          parameterType="map"
          resultMap="ResultMapWithBLOBs">
    select
    a.id, a.record_name, a.record_type, a.delete_flg, a.create_time, a.create_user_id, a.update_time, a.owner_id,a.owner_name,
    a.update_user_id,a.create_user_name,a.update_user_name,a.project_id,a.record_content,b.project_name
    from job_record a
    left join project b on a.project_id = b.id
    <where>
      <if test="id!=null">
        and a.id=#{id}
      </if>
      <if test="recordType != null">
        and a.record_type = #{recordType,jdbcType=INTEGER}
      </if>
      <if test="deleteFlg != null">
        and a.delete_flg= #{deleteFlg,jdbcType=INTEGER}
      </if>
      <if test="createUserId != null and myName != null">
        and (a.create_user_id = #{createUserId,jdbcType=INTEGER}
        or position(#{myName,jdbcType=VARCHAR} in CONCAT(a.owner_name,',') ) >0
        or a.create_user_id = 1)
      </if>
    </where>
    ORDER BY a.id DESC
  </select>
</mapper>