<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ylwoa.dao.ExcelMapper">
  <resultMap id="BaseResultMap" type="com.ylwoa.model.Excel">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="version" jdbcType="BIGINT" property="version" />
    <result column="excel_type" jdbcType="INTEGER" property="excelType" />
    <result column="plan_start_date" jdbcType="DATE" property="planStartDate" />
    <result column="plan_end_date" jdbcType="DATE" property="planEndDate" />
    <result column="excel_id" jdbcType="BIGINT" property="excelId" />
    <result column="excel_name" jdbcType="VARCHAR" property="excelName" />
    <result column="version" jdbcType="BIGINT" property="version" />
    <result column="project_id" jdbcType="BIGINT" property="projectId" />
    <result column="project_name" jdbcType="VARCHAR" property="projectName" />
    <result column="data_json" jdbcType="LONGVARCHAR" property="dataJson" />
    <result column="owner_name" jdbcType="VARCHAR" property="ownerName" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="delete_flg" jdbcType="INTEGER" property="deleteFlg" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_user_id" jdbcType="INTEGER" property="createUserId" />
    <result column="create_user_name" jdbcType="VARCHAR" property="createUserName" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_user_id" jdbcType="INTEGER" property="updateUserId" />
    <result column="update_user_name" jdbcType="VARCHAR" property="updateUserName" />
  </resultMap>
  <sql id="Base_Column_List">
    id, version, excel_type
  </sql>
  <sql id="Base_Data_Column_List">
    id, excel_id, excel_name, version,project_id, status, delete_flg,plan_start_date,plan_end_date,create_time, create_user_id,
    create_user_name, update_time, update_user_id, update_user_name, data_json,owner_name
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from excel
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from excel
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.ylwoa.model.Excel" useGeneratedKeys="true" keyProperty="id" >
    insert into excel (id, version, excel_type
      )
    values (#{id,jdbcType=BIGINT}, #{version,jdbcType=BIGINT}, #{excelType,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ylwoa.model.Excel">
    insert into excel
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="excelType != null">
        excel_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>
      <if test="excelType != null">
        #{excelType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ylwoa.model.Excel">
    update excel
    <set>
      <if test="version != null">
        version = #{version,jdbcType=BIGINT},
      </if>
      <if test="excelType != null">
        excel_type = #{excelType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ylwoa.model.Excel">
    update excel
    set version = #{version,jdbcType=BIGINT},
      excel_type = #{excelType,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="select"
          parameterType="map"
          resultMap="BaseResultMap">
    select a.id,a.version,a.excel_type,d.delete_flg,d.plan_start_date,d.plan_end_date,
    d.excel_id,d.excel_name,d.status,d.create_time,d.create_user_id,d.create_user_name,
    d.update_time,d.update_user_id,d.update_user_name,d.owner_name,d.project_id,e.project_name from excel as a
    inner join
    (
      select b.excel_id,b.excel_name,b.project_id,b.status,b.delete_flg,b.plan_start_date,b.plan_end_date,
      b.create_time,b.create_user_id,b.create_user_name,
      b.update_time,b.update_user_id,b.update_user_name,b.owner_name from excel_data as b
      where b.version = (select max(c.version) from excel_data as c where b.excel_id = c.excel_id)
      <if test="excelId != null">
        and b.excel_id =  #{excelId,jdbcType=INTEGER}
      </if>
      <if test="deleteFlg != null">
        and b.delete_flg =  #{deleteFlg,jdbcType=INTEGER}
      </if>
    ) as d
    on a.id = d.excel_id
    LEFT JOIN project e ON d.project_id = e.id
    where 1=1
    <if test="excelType != null">
      and a.excel_type =  #{excelType,jdbcType=INTEGER}
    </if>
    <if test="createUserId != null and myName != null">
      and (d.create_user_id = #{createUserId,jdbcType=INTEGER}
      or position(#{myName,jdbcType=VARCHAR} in CONCAT(d.owner_name,',') ) >0
      or d.create_user_id = 1)
    </if>
    ORDER BY d.status ASC, d.update_time DESC
  </select>
  <select id="selectById"
          parameterType="map"
          resultMap="BaseResultMap">
    select a.id,a.version,a.excel_type,d.delete_flg,d.plan_start_date,d.plan_end_date,
    d.excel_id,d.excel_name,d.status,d.create_time,d.create_user_id,d.create_user_name,
    d.update_time,d.update_user_id,d.update_user_name,d.data_json,d.owner_name,d.project_id,e.project_name from excel as a
    inner join
    (
    select b.excel_id,b.excel_name,b.project_id,b.status,b.delete_flg,b.data_json,b.plan_start_date,b.plan_end_date,
    b.create_time,b.create_user_id,b.create_user_name,
    b.update_time,b.update_user_id,b.update_user_name,b.owner_name from excel_data as b
    where b.version = (select max(c.version) from excel_data as c where b.excel_id = c.excel_id)
    <if test="excelId != null">
      and b.excel_id =  #{excelId,jdbcType=INTEGER}
    </if>
    <if test="deleteFlg != null">
      and b.delete_flg =  #{deleteFlg,jdbcType=INTEGER}
    </if>
    ) as d
    on a.id = d.excel_id
    LEFT JOIN project e ON d.project_id = e.id
    ORDER BY a.id DESC
  </select>
</mapper>